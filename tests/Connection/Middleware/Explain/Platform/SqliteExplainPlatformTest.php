<?php

namespace Connection\Middleware\Explain\Platform;

use Bdf\Prime\Connection\Middleware\Explain\ExplainResult;
use Bdf\Prime\Connection\Middleware\Explain\Platform\SqliteExplainPlatform;
use Bdf\Prime\Connection\Middleware\Explain\QueryType;
use Doctrine\DBAL\Driver\Result;
use PHPUnit\Framework\TestCase;

class SqliteExplainPlatformTest extends TestCase
{
    public function test_parse_3_36()
    {
        $result = $this->parse(['SCAN t1']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t1'], $result->tables);
        $this->assertEquals([], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertNull($result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN t1', $result->steps[0]->extra);

        $result = $this->parse(['SEARCH t1 USING INDEX i1 (a=?)']);
        $this->assertEquals(QueryType::INDEX, $result->type);
        $this->assertEquals(['t1'], $result->tables);
        $this->assertEquals(['i1'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i1', $result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH t1 USING INDEX i1 (a=?)', $result->steps[0]->extra);

        $result = $this->parse(['SEARCH t1 USING COVERING INDEX i2 (a=?)']);
        $this->assertEquals(QueryType::INDEX, $result->type);
        $this->assertEquals(['t1'], $result->tables);
        $this->assertEquals(['i2'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertTrue($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH t1 USING COVERING INDEX i2 (a=?)', $result->steps[0]->extra);

        $result = $this->parse(['SEARCH t1 USING INDEX i2 (a=? AND b>?)', 'SCAN t2']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t1', 't2'], $result->tables);
        $this->assertEquals(['i2'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(2, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH t1 USING INDEX i2 (a=? AND b>?)', $result->steps[0]->extra);
        $this->assertEquals(QueryType::SCAN, $result->steps[1]->type);
        $this->assertEquals('t2', $result->steps[1]->table);
        $this->assertNull($result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SCAN t2', $result->steps[1]->extra);

        $result = $this->parse(['MULTI-INDEX OR', 'SEARCH t1 USING COVERING INDEX i2 (a=?)', 'SEARCH t1 USING INDEX i3 (b=?)']);
        $this->assertEquals(QueryType::INDEX, $result->type);
        $this->assertEquals(['t1', 't1'], $result->tables);
        $this->assertEquals(['i2', 'i3'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(2, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH t1 USING COVERING INDEX i2 (a=?)', $result->steps[0]->extra);
        $this->assertEquals(QueryType::INDEX, $result->steps[1]->type);
        $this->assertEquals('t1', $result->steps[1]->table);
        $this->assertEquals('i3', $result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SEARCH t1 USING INDEX i3 (b=?)', $result->steps[1]->extra);

        $result = $this->parse(['SCAN t2', 'USE TEMP B-TREE FOR ORDER BY']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t2'], $result->tables);
        $this->assertEquals([], $result->indexes);
        $this->assertTrue($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(2, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t2', $result->steps[0]->table);
        $this->assertNull($result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN t2', $result->steps[0]->extra);
        $this->assertEquals(QueryType::UNDEFINED, $result->steps[1]->type);
        $this->assertNull($result->steps[1]->table);
        $this->assertNull($result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertTrue($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('USE TEMP B-TREE FOR ORDER BY', $result->steps[1]->extra);

        $result = $this->parse(['SCAN t2 USING INDEX i4']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t2'], $result->tables);
        $this->assertEquals(['i4'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t2', $result->steps[0]->table);
        $this->assertEquals('i4', $result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN t2 USING INDEX i4', $result->steps[0]->extra);

        $result = $this->parse(['SCAN TABLE t2 USING COVERING INDEX i4', 'SCALAR SUBQUERY', 'SEARCH t1 USING COVERING INDEX i2 (a=?)', 'CORRELATED SCALAR SUBQUERY', 'SEARCH t1 USING INDEX i3 (b=?)']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t2', 't1', 't1'], $result->tables);
        $this->assertEquals(['i4', 'i2', 'i3'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(3, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t2', $result->steps[0]->table);
        $this->assertEquals('i4', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN TABLE t2 USING COVERING INDEX i4', $result->steps[0]->extra);
        $this->assertEquals(QueryType::INDEX, $result->steps[1]->type);
        $this->assertEquals('t1', $result->steps[1]->table);
        $this->assertEquals('i2', $result->steps[1]->index);
        $this->assertTrue($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SEARCH t1 USING COVERING INDEX i2 (a=?)', $result->steps[1]->extra);
        $this->assertEquals(QueryType::INDEX, $result->steps[2]->type);
        $this->assertEquals('t1', $result->steps[2]->table);
        $this->assertEquals('i3', $result->steps[2]->index);
        $this->assertFalse($result->steps[2]->covering);
        $this->assertFalse($result->steps[2]->temporary);
        $this->assertNull($result->steps[2]->rows);
        $this->assertEquals('SEARCH t1 USING INDEX i3 (b=?)', $result->steps[2]->extra);

        $result = $this->parse(['CO-ROUTINE qqq', 'SCAN t1 USING COVERING INDEX i2', 'SCAN qqqq', 'USE TEMP B-TREE FOR GROUP BY']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t1', 'qqqq'], $result->tables);
        $this->assertEquals(['i2'], $result->indexes);
        $this->assertTrue($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(3, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN t1 USING COVERING INDEX i2', $result->steps[0]->extra);
        $this->assertEquals(QueryType::SCAN, $result->steps[1]->type);
        $this->assertEquals('qqqq', $result->steps[1]->table);
        $this->assertNull($result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SCAN qqqq', $result->steps[1]->extra);
        $this->assertEquals(QueryType::UNDEFINED, $result->steps[2]->type);
        $this->assertNull($result->steps[2]->table);
        $this->assertNull($result->steps[2]->index);
        $this->assertFalse($result->steps[2]->covering);
        $this->assertTrue($result->steps[2]->temporary);
        $this->assertNull($result->steps[2]->rows);
        $this->assertEquals('USE TEMP B-TREE FOR GROUP BY', $result->steps[2]->extra);
    }

    public function test_parse_3_24()
    {
        $result = $this->parse(['SCAN TABLE t1']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t1'], $result->tables);
        $this->assertEquals([], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertNull($result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN TABLE t1', $result->steps[0]->extra);

        $result = $this->parse(['SEARCH TABLE t1 USING INDEX i1 (a=?)']);
        $this->assertEquals(QueryType::INDEX, $result->type);
        $this->assertEquals(['t1'], $result->tables);
        $this->assertEquals(['i1'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i1', $result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING INDEX i1 (a=?)', $result->steps[0]->extra);

        $result = $this->parse(['SEARCH TABLE t1 USING COVERING INDEX i2 (a=?)']);
        $this->assertEquals(QueryType::INDEX, $result->type);
        $this->assertEquals(['t1'], $result->tables);
        $this->assertEquals(['i2'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertTrue($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING COVERING INDEX i2 (a=?)', $result->steps[0]->extra);

        $result = $this->parse(['SEARCH TABLE t1 USING INDEX i2 (a=? AND b>?)', 'SCAN TABLE t2']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t1', 't2'], $result->tables);
        $this->assertEquals(['i2'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(2, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING INDEX i2 (a=? AND b>?)', $result->steps[0]->extra);
        $this->assertEquals(QueryType::SCAN, $result->steps[1]->type);
        $this->assertEquals('t2', $result->steps[1]->table);
        $this->assertNull($result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SCAN TABLE t2', $result->steps[1]->extra);

        $result = $this->parse(['MULTI-INDEX OR', 'SEARCH TABLE t1 USING COVERING INDEX i2 (a=?)', 'SEARCH TABLE t1 USING INDEX i3 (b=?)']);
        $this->assertEquals(QueryType::INDEX, $result->type);
        $this->assertEquals(['t1', 't1'], $result->tables);
        $this->assertEquals(['i2', 'i3'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(2, $result->steps);
        $this->assertEquals(QueryType::INDEX, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING COVERING INDEX i2 (a=?)', $result->steps[0]->extra);
        $this->assertEquals(QueryType::INDEX, $result->steps[1]->type);
        $this->assertEquals('t1', $result->steps[1]->table);
        $this->assertEquals('i3', $result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING INDEX i3 (b=?)', $result->steps[1]->extra);

        $result = $this->parse(['SCAN TABLE t2', 'USE TEMP B-TREE FOR ORDER BY']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t2'], $result->tables);
        $this->assertEquals([], $result->indexes);
        $this->assertTrue($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(2, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t2', $result->steps[0]->table);
        $this->assertNull($result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN TABLE t2', $result->steps[0]->extra);
        $this->assertEquals(QueryType::UNDEFINED, $result->steps[1]->type);
        $this->assertNull($result->steps[1]->table);
        $this->assertNull($result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertTrue($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('USE TEMP B-TREE FOR ORDER BY', $result->steps[1]->extra);

        $result = $this->parse(['SCAN TABLE t2 USING INDEX i4']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t2'], $result->tables);
        $this->assertEquals(['i4'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(1, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t2', $result->steps[0]->table);
        $this->assertEquals('i4', $result->steps[0]->index);
        $this->assertFalse($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN TABLE t2 USING INDEX i4', $result->steps[0]->extra);

        $result = $this->parse(['SCAN TABLE t2 USING COVERING INDEX i4', 'SCALAR SUBQUERY', 'SEARCH TABLE t1 USING COVERING INDEX i2 (a=?)', 'CORRELATED SCALAR SUBQUERY', 'SEARCH TABLE t1 USING INDEX i3 (b=?)']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t2', 't1', 't1'], $result->tables);
        $this->assertEquals(['i4', 'i2', 'i3'], $result->indexes);
        $this->assertFalse($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(3, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t2', $result->steps[0]->table);
        $this->assertEquals('i4', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN TABLE t2 USING COVERING INDEX i4', $result->steps[0]->extra);
        $this->assertEquals(QueryType::INDEX, $result->steps[1]->type);
        $this->assertEquals('t1', $result->steps[1]->table);
        $this->assertEquals('i2', $result->steps[1]->index);
        $this->assertTrue($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING COVERING INDEX i2 (a=?)', $result->steps[1]->extra);
        $this->assertEquals(QueryType::INDEX, $result->steps[2]->type);
        $this->assertEquals('t1', $result->steps[2]->table);
        $this->assertEquals('i3', $result->steps[2]->index);
        $this->assertFalse($result->steps[2]->covering);
        $this->assertFalse($result->steps[2]->temporary);
        $this->assertNull($result->steps[2]->rows);
        $this->assertEquals('SEARCH TABLE t1 USING INDEX i3 (b=?)', $result->steps[2]->extra);

        $result = $this->parse(['CO-ROUTINE 0x20FC3E0', 'SCAN TABLE t1 USING COVERING INDEX i2', 'SCAN SUBQUERY 0x20FC3E0', 'USE TEMP B-TREE FOR GROUP BY']);
        $this->assertEquals(QueryType::SCAN, $result->type);
        $this->assertEquals(['t1', 'SUBQUERY'], $result->tables);
        $this->assertEquals(['i2'], $result->indexes);
        $this->assertTrue($result->temporary);
        $this->assertFalse($result->covering);
        $this->assertNull($result->rows);
        $this->assertCount(3, $result->steps);
        $this->assertEquals(QueryType::SCAN, $result->steps[0]->type);
        $this->assertEquals('t1', $result->steps[0]->table);
        $this->assertEquals('i2', $result->steps[0]->index);
        $this->assertTrue($result->steps[0]->covering);
        $this->assertFalse($result->steps[0]->temporary);
        $this->assertNull($result->steps[0]->rows);
        $this->assertEquals('SCAN TABLE t1 USING COVERING INDEX i2', $result->steps[0]->extra);
        $this->assertEquals(QueryType::SCAN, $result->steps[1]->type);
        $this->assertEquals('SUBQUERY', $result->steps[1]->table);
        $this->assertNull($result->steps[1]->index);
        $this->assertFalse($result->steps[1]->covering);
        $this->assertFalse($result->steps[1]->temporary);
        $this->assertNull($result->steps[1]->rows);
        $this->assertEquals('SCAN SUBQUERY 0x20FC3E0', $result->steps[1]->extra);
        $this->assertEquals(QueryType::UNDEFINED, $result->steps[2]->type);
        $this->assertNull($result->steps[2]->table);
        $this->assertNull($result->steps[2]->index);
        $this->assertFalse($result->steps[2]->covering);
        $this->assertTrue($result->steps[2]->temporary);
        $this->assertNull($result->steps[2]->rows);
        $this->assertEquals('USE TEMP B-TREE FOR GROUP BY', $result->steps[2]->extra);
    }

    public function parse(array $rows): ExplainResult
    {
        $rows = array_map(fn ($v) => ['detail' => $v], $rows);

        $result = $this->createMock(Result::class);
        $result->method('fetchAllAssociative')->willReturn($rows);

        return (new SqliteExplainPlatform())->parse($result);
    }
}
